{
  "name": "remotes",
  "description": "remotes",
  "version": "0.0.1",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "debug": "latest",
    "express": "~3.2.4",
    "eventemitter2": "~0.4.11",
    "sl-task-emitter": "git+ssh://git@github.com:strongloop/sl-task-emitter",
    "socket.io": "git://github.com/LearnBoost/socket.io.git",
    "socket.io-client": "git://github.com/LearnBoost/socket.io-client.git"
  },
  "devDependencies": {
    "mocha": "latest"
  },
  "readme": "# remotes\nv0.0.1\n\nA library for sharing server side JavaScript classes over various transports and protocols to clients written in various languages.\n\n## Usage\n\nDefine a shared class in JavaScript on the server. Give it a remote constructor. Mark which methods should be exposed and define their input and outut types.\n\n## Shared Classes\n\nA class defined on the server that can be used on the client. Only exposes methods that are marked to be exposed. Requires a remote constructor that creates an instance of the class when constructed remotely.\n\n**Example ~ Server**\n\n    function Dog(name) {\n      this.name = name;\n    }\n    Dog.sharedCtor = function (name, fn) {\n      fn(null, new MyClass(name));\n    }\n    Dog.remoteConstructor.accepts = [\n      {arg: 'name', type: 'string'}\n    ];\n\n    Dog.prototype.speak = function (fn) {\n      fn(null, 'roof! my name is ' + this.name);\n    }\n    Dog.prototype.speak.shared = true;\n    Dog.prototype.speak.returns = [\n      {arg: 'sound', type: 'string'}\n    ];\n\n## Source Generators\n\nOnce a class is defined, a source generator may be used to generate client source code.\n\n**Example ~ Generated JS Client**\n\n    Remotes.Dog = function Dog(name) {\n      Remotes.Base.apply(this, arguments);\n    }\n\n    Dog.prototype.speak = function (fn) {\n      this.callRemote('speak', fn);\n    }\n\n## Servers / Transports\n\nServers expose classes over one or more transports.\n\n**Example ~ Server / Transport Usage**\n\n    // a set of shared classes\n    var remotes = require('remotes').create();\n    \n    // expose classes\n    remotes.exports.dog = Dog;\n    \n    // server\n    require('http')\n      .createServer(remotes.handler('rest'))\n      .listen(3000);\n\n## Clients\n\nClients point to a server and call methods.\n\n**Example ~ Client Usage**\n\n    // a set of shared classes\n    var remotes = require('remotes').create();\n  \n    remotes.client('rest').connect(3000);\n    var Dog = Remotes.Dog;\n    \n    var dog = new Dog('fido');\n\n    dog.speak(function (err, result) {\n      console.log(result); // roof! my name is fido\n    });\n\n\n## Docs\n\n### Method Settings\n\n** General Settings **\n\nMark a method as shared / exposed / remotable:\n\n    MyClass.prototype.myMethod.shared = true;\n\n** HTTP Settings **\n\nOverride the default http routing.\n\n    // define a new base route for the entire class\n    MyClass.http = [\n      {path: '/:foo'} // `foo` can be used as an arg\n    ];\n    \n    // routes are relative to class namespace\n    MyClass.prototype.myMethod.http = [\n      {verb: 'POST', path: '/foo/:bar'}, // special route\n      {verb: 'PUT'} // uses default route\n    ];",
  "readmeFilename": "README.bak.md",
  "_id": "remotes@0.0.1",
  "dist": {
    "shasum": "3f880d47922bc26e0cc52a1eb59e64fcede5cc7c"
  },
  "_resolved": "git+ssh://git@github.com/:strongloop/sl-remoting.git#f60571c06404e38c5a6cd6896f407bb652ca51f2",
  "_from": "sl-remoting@git+ssh://git@github.com:strongloop/sl-remoting.git"
}
